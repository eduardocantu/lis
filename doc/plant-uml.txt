@startuml

interface TestVisitor {
	{abstract} void visit(Test test)
	{abstract} void visit(Biochemistry test)
	{abstract} void visit(Hematology test)
	{abstract} void visit(Immunology test)
	{abstract} void visit(Microbiology test)
}

interface VisitableTest {
    {abstract} void accept(TestVisitor visitor)
}

interface Sample

abstract Container<T extends Sample>

class Tube<Blood>

interface Operation {
    {abstract} List<String getResults()
}

class Calculation

abstract Test {
    Map<String,Object> properties
}

class Biochemistry {
    Map<String,Object> specificProperties
}

VisitableTest -> TestVisitor

Container <|-- Tube

Sample <|-- Blood
Sample <|-- Serum

Sample --o Container

VisitableTest <|-- Test

Test <|-- Biochemistry
Test <|-- Immunology
Test <|-- Microbiology
Test <|-- Hematology

Order o-- Container
Order *-- Test
Test *-- Sample

Patient *-- Sample
Container "1..*" -- "1..1" Patient

Order *-- Operation
Operation --> Test

TestVisitor <|-- Operation
Operation <|-- Calculation
@enduml
